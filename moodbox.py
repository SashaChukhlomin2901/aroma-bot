import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler
)

# Настройка логов
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Константы состояний
PET, MOOD, AROMA, FINAL = range(4)

# ========== БАЗА РЕЦЕПТОВ ==========
# Обычные рецепты (лимон, лаванда, апельсин, мята, иланг, кедр)
RECIPES_NORMAL = {
    "энергия": {
        "утро": "🍋 Лимон (3) + 🌿 Мята (2)",
        "спорт": "🍊 Апельсин (3) + 🌿 Мята (1) + 🍋 Лимон (1)",
        "офис": "🌲 Кедр (2) + 🍋 Лимон (2)",
        "дедлайн": "🌿 Мята (3) + 🍋 Лимон (1) + 🌲 Кедр (1)",
        "танцы": "🍊 Апельсин (2) + 🌺 Иланг (2) + 🌿 Мята (1)"
    },
    "покой": {
        "вечер": "🪷 Лаванда (3) + 🌲 Кедр (1) + 🌺 Иланг (1)",
        "медитация": "🪷 Лаванда (4) + 🌲 Кедр (1)",
        "ванна": "🌺 Иланг (2) + 🍊 Апельсин (1) + 🪷 Лаванда (2)",
        "сон": "🪷 Лаванда (3) + 🌲 Кедр (2)",
        "чай": "🍊 Апельсин (2) + 🌲 Кедр (1) + 🍋 Лимон (1)"
    },
    "творчество": {
        "художник": "🍊 Апельсин (3) + 🌺 Иланг (1) + 🌿 Мята (1)",
        "писатель": "🌲 Кедр (2) + 🍋 Лимон (2) + 🍊 Апельсин (1)",
        "музыка": "🌺 Иланг (3) + 🍊 Апельсин (2)",
        "дизайн": "🌿 Мята (2) + 🍋 Лимон (2) + 🌺 Иланг (1)",
        "идеи": "🍊 Апельсин (2) + 🌿 Мята (2) + 🌲 Кедр (1)"
    },
    "ностальгия": {
        "детство": "🍊 Апельсин (3) + 🌲 Кедр (2)",
        "бабушкин_дом": "🌲 Кедр (3) + 🍋 Лимон (1) + 🪷 Лаванда (1)",
        "первая_любовь": "🌺 Иланг (3) + 🍊 Апельсин (2)",
        "школа": "🍋 Лимон (2) + 🍊 Апельсин (2) + 🌿 Мята (1)",
        "каникулы": "🌿 Мята (2) + 🍊 Апельсин (3)"
    },
    "страсть": {
        "романтика": "🌺 Иланг (3) + 🍊 Апельсин (2)",
        "танго": "🌿 Мята (2) + 🌺 Иланг (2) + 🍋 Лимон (1)",
        "тайна": "🌲 Кедр (3) + 🌺 Иланг (2)",
        "глубина": "🪷 Лаванда (2) + 🌺 Иланг (3)",
        "огонь": "🍊 Апельсин (3) + 🌿 Мята (2)"
    },
    "фокус": {
        "учеба": "🌿 Мята (3) + 🍋 Лимон (2)",
        "работа": "🌲 Кедр (2) + 🍋 Лимон (2) + 🌿 Мята (1)",
        "шахматы": "🍊 Апельсин (2) + 🌲 Кедр (2) + 🌿 Мята (1)",
        "код": "🌿 Мята (3) + 🍊 Апельсин (1) + 🍋 Лимон (1)",
        "финансы": "🌲 Кедр (3) + 🍋 Лимон (2)"
    },
    "гармония": {
        "йога": "🪷 Лаванда (2) + 🌲 Кедр (2) + 🌺 Иланг (1)",
        "баланс": "🍊 Апельсин (2) + 🪷 Лаванда (2) + 🌺 Иланг (1)",
        "природа": "🌲 Кедр (3) + 🌿 Мята (1) + 🍋 Лимон (1)",
        "дыхание": "🪷 Лаванда (3) + 🌺 Иланг (2)",
        "поток": "🍊 Апельсин (2) + 🌺 Иланг (2) + 🌲 Кедр (1)"
    },
    "мечта": {
        "полет": "🌺 Иланг (3) + 🍊 Апельсин (2)",
        "океан": "🌿 Мята (2) + 🍋 Лимон (3)",
        "звезды": "🌲 Кедр (3) + 🍊 Апельсин (1) + 🌺 Иланг (1)",
        "чудо": "🍋 Лимон (2) + 🌺 Иланг (2) + 🍊 Апельсин (1)",
        "волшебство": "🪷 Лаванда (2) + 🌺 Иланг (3)"
    },
    "бодрость": {
        "пробуждение": "🍋 Лимон (3) + 🌿 Мята (2)",
        "заряд": "🍊 Апельсин (3) + 🌿 Мята (1) + 🍋 Лимон (1)",
        "драйв": "🌿 Мята (3) + 🍊 Апельсин (2)",
        "марафон": "🌲 Кедр (2) + 🍋 Лимон (2) + 🌿 Мята (1)",
        "старт": "🍊 Апельсин (3) + 🌺 Иланг (1) + 🌿 Мята (1)"
    },
    "уют": {
        "камин": "🌲 Кедр (3) + 🍊 Апельсин (2)",
        "плед": "🪷 Лаванда (3) + 🌲 Кедр (2)",
        "книга": "🍊 Апельсин (2) + 🌲 Кедр (2) + 🍋 Лимон (1)",
        "кофе": "🌿 Мята (1) + 🍊 Апельсин (3) + 🍋 Лимон (1)",
        "дождь": "🪷 Лаванда (2) + 🌲 Кедр (2) + 🌺 Иланг (1)"
    }
}

# Безопасные рецепты (лаванда, герань, ромашка, кедр, нероли, копайба)
RECIPES_PET_SAFE = {
    "энергия": {
        "утро": "🌿 Герань (3) + 🌼 Ромашка (2)",
        "спорт": "🌲 Кедр (2) + 🌼 Ромашка (2) + 🌿 Герань (1)",
        "офис": "🌲 Кедр (3) + 🌼 Ромашка (1)",
        "дедлайн": "🌼 Ромашка (3) + 🌿 Герань (2)",
        "танцы": "🌸 Нероли (2) + 🌿 Герань (2) + 🌲 Копайба (1)"
    },
    "покой": {
        "вечер": "🪷 Лаванда (3) + 🌼 Ромашка (2)",
        "медитация": "🪷 Лаванда (4) + 🌲 Кедр (1)",
        "ванна": "🌸 Нероли (2) + 🌼 Ромашка (2) + 🪷 Лаванда (1)",
        "сон": "🪷 Лаванда (3) + 🌼 Ромашка (2)",
        "чай": "🌲 Копайба (2) + 🌲 Кедр (1) + 🌼 Ромашка (1)"
    },
    "творчество": {
        "художник": "🌸 Нероли (3) + 🌿 Герань (1) + 🌼 Ромашка (1)",
        "писатель": "🌲 Кедр (2) + 🌼 Ромашка (2) + 🌲 Копайба (1)",
        "музыка": "🌸 Нероли (3) + 🌲 Копайба (2)",
        "дизайн": "🌼 Ромашка (2) + 🌿 Герань (2) + 🌲 Копайба (1)",
        "идеи": "🌲 Копайба (2) + 🌼 Ромашка (2) + 🌲 Кедр (1)"
    },
    "ностальгия": {
        "детство": "🌲 Копайба (3) + 🌲 Кедр (2)",
        "бабушкин_дом": "🌲 Кедр (3) + 🌼 Ромашка (1) + 🪷 Лаванда (1)",
        "первая_любовь": "🌸 Нероли (3) + 🌲 Копайба (2)",
        "школа": "🌿 Герань (2) + 🌲 Копайба (2) + 🌼 Ромашка (1)",
        "каникулы": "🌼 Ромашка (2) + 🌲 Копайба (3)"
    },
    "страсть": {
        "романтика": "🌸 Нероли (3) + 🌲 Копайба (2)",
        "танго": "🌿 Герань (2) + 🌸 Нероли (2) + 🌼 Ромашка (1)",
        "тайна": "🌲 Кедр (3) + 🌸 Нероли (2)",
        "глубина": "🪷 Лаванда (2) + 🌸 Нероли (3)",
        "огонь": "🌲 Копайба (3) + 🌿 Герань (2)"
    },
    "фокус": {
        "учеба": "🌼 Ромашка (3) + 🌿 Герань (2)",
        "работа": "🌲 Кедр (2) + 🌿 Герань (2) + 🌼 Ромашка (1)",
        "шахматы": "🌲 Копайба (2) + 🌲 Кедр (2) + 🌼 Ромашка (1)",
        "код": "🌼 Ромашка (3) + 🌲 Копайба (1) + 🌿 Герань (1)",
        "финансы": "🌲 Кедр (3) + 🌿 Герань (2)"
    },
    "гармония": {
        "йога": "🪷 Лаванда (2) + 🌲 Кедр (2) + 🌸 Нероли (1)",
        "баланс": "🌲 Копайба (2) + 🪷 Лаванда (2) + 🌸 Нероли (1)",
        "природа": "🌲 Кедр (3) + 🌼 Ромашка (1) + 🌿 Герань (1)",
        "дыхание": "🪷 Лаванда (3) + 🌸 Нероли (2)",
        "поток": "🌲 Копайба (2) + 🌸 Нероли (2) + 🌲 Кедр (1)"
    },
    "мечта": {
        "полет": "🌸 Нероли (3) + 🌲 Копайба (2)",
        "океан": "🌼 Ромашка (2) + 🌿 Герань (3)",
        "звезды": "🌲 Кедр (3) + 🌲 Копайба (1) + 🌸 Нероли (1)",
        "чудо": "🌿 Герань (2) + 🌸 Нероли (2) + 🌲 Копайба (1)",
        "волшебство": "🪷 Лаванда (2) + 🌸 Нероли (3)"
    },
    "бодрость": {
        "пробуждение": "🌿 Герань (3) + 🌼 Ромашка (2)",
        "заряд": "🌲 Копайба (3) + 🌼 Ромашка (1) + 🌿 Герань (1)",
        "драйв": "🌼 Ромашка (3) + 🌲 Копайба (2)",
        "марафон": "🌲 Кедр (2) + 🌿 Герань (2) + 🌼 Ромашка (1)",
        "старт": "🌲 Копайба (3) + 🌸 Нероли (1) + 🌼 Ромашка (1)"
    },
    "уют": {
        "камин": "🌲 Кедр (3) + 🌲 Копайба (2)",
        "плед": "🪷 Лаванда (3) + 🌲 Кедр (2)",
        "книга": "🌲 Копайба (2) + 🌲 Кедр (2) + 🌿 Герань (1)",
        "кофе": "🌼 Ромашка (1) + 🌲 Копайба (3) + 🌿 Герань (1)",
        "дождь": "🪷 Лаванда (2) + 🌲 Кедр (2) + 🌸 Нероли (1)"
    }
}

# Список всех настроений для случайного выбора
ALL_MOODS = list(RECIPES_NORMAL.keys())

# ========== КЛАВИАТУРЫ ==========
def mood_keyboard():
    """Клавиатура с 10 настроениями и кнопкой рандома"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("⚡️ Энергия", callback_data="энергия"),
         InlineKeyboardButton("🕊️ Покой", callback_data="покой")],
        [InlineKeyboardButton("🎨 Творчество", callback_data="творчество"),
         InlineKeyboardButton("📻 Ностальгия", callback_data="ностальгия")],
        [InlineKeyboardButton("🔥 Страсть", callback_data="страсть"),
         InlineKeyboardButton("🎯 Фокус", callback_data="фокус")],
        [InlineKeyboardButton("🌈 Гармония", callback_data="гармония"),
         InlineKeyboardButton("✨ Мечта", callback_data="мечта")],
        [InlineKeyboardButton("🚀 Бодрость", callback_data="бодрость"),
         InlineKeyboardButton("🏠 Уют", callback_data="уют")],
        [InlineKeyboardButton("🎲 Рандомный аромат", callback_data="random")]
    ])

def aroma_keyboard(mood: str):
    """Клавиатура с 5 ароматами для выбранного настроения"""
    # Создаем красивые названия для кнопок
    pretty_names = {
        "утро": "🌅 Утро",
        "спорт": "🏃 Спорт",
        "офис": "💼 Офис",
        "дедлайн": "⏰ Дедлайн",
        "танцы": "💃 Танцы",
        "вечер": "🌇 Вечер",
        "медитация": "🧘 Медитация",
        "ванна": "🛁 Ванна",
        "сон": "😴 Сон",
        "чай": "🍵 Чай",
        "художник": "🎨 Художник",
        "писатель": "📝 Писатель",
        "музыка": "🎵 Музыка",
        "дизайн": "✏️ Дизайн",
        "идеи": "💡 Идеи",
        "детство": "🧸 Детство",
        "бабушкин_дом": "🏡 Бабушкин дом",
        "первая_любовь": "💘 Первая любовь",
        "школа": "🎒 Школа",
        "каникулы": "🏖️ Каникулы",
        "романтика": "🌹 Романтика",
        "танго": "💃 Танго",
        "тайна": "🔮 Тайна",
        "глубина": "🕳️ Глубина",
        "огонь": "🔥 Огонь",
        "учеба": "📚 Учеба",
        "работа": "💻 Работа",
        "шахматы": "♟️ Шахматы",
        "код": "💻 Код",
        "финансы": "💰 Финансы",
        "йога": "🧘 Йога",
        "баланс": "⚖️ Баланс",
        "природа": "🌳 Природа",
        "дыхание": "🌬️ Дыхание",
        "поток": "🌊 Поток",
        "полет": "✈️ Полет",
        "океан": "🌊 Океан",
        "звезды": "🌌 Звезды",
        "чудо": "🦄 Чудо",
        "волшебство": "🧙 Волшебство",
        "пробуждение": "⏰ Пробуждение",
        "заряд": "🔋 Заряд",
        "драйв": "🏎️ Драйв",
        "марафон": "🏁 Марафон",
        "старт": "🚀 Старт",
        "камин": "🔥 Камин",
        "плед": "🧶 Плед",
        "книга": "📚 Книга",
        "кофе": "☕ Кофе",
        "дождь": "🌧️ Дождь"
    }
    
    aromas = list(RECIPES_NORMAL[mood].keys()) if mood in RECIPES_NORMAL else []
    
    buttons = []
    for aroma in aromas:
        pretty_name = pretty_names.get(aroma, aroma.capitalize())
        buttons.append([InlineKeyboardButton(pretty_name, callback_data=aroma)])
    
    # Добавляем кнопку возврата
    buttons.append([InlineKeyboardButton("🔙 Назад к настроениям", callback_data="back")])
    
    return InlineKeyboardMarkup(buttons)

def final_keyboard():
    """Клавиатура для экрана с рецептом"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("🎲 Рандомный аромат", callback_data="random")],
        [InlineKeyboardButton("🔄 Новый аромат", callback_data="new_aroma")],
        [InlineKeyboardButton("🔁 Новое настроение", callback_data="new_mood")]
    ])

# ========== ОБРАБОТЧИКИ ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Начало диалога, спрашиваем про питомцев"""
    # Сброс предыдущих данных
    context.user_data.clear()
    
    keyboard = [
        [InlineKeyboardButton("Да, есть", callback_data="pet_yes")],
        [InlineKeyboardButton("Нет", callback_data="pet_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "🌿 Привет! Я ваш арома-гид от NeuroScent!\n"
        "Для безопасных рецептов укажите: есть ли у вас домашние питомцы?",
        reply_markup=reply_markup
    )
    return PET

async def pet_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработка выбора про питомцев"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "pet_yes":
        context.user_data["pet_safe"] = True
        await query.edit_message_text(
            "🐾 Включен безопасный режим для питомцев\n"
            "Выберите настроение:",
            reply_markup=mood_keyboard()
        )
    else:
        context.user_data["pet_safe"] = False
        await query.edit_message_text(
            "Выберите настроение:",
            reply_markup=mood_keyboard()
        )
    return MOOD

async def mood_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработка выбора настроения"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "random":
        # Генерация случайного аромата
        return await random_aroma(update, context)
    
    mood = query.data
    
    # Сохраняем выбранное настроение
    context.user_data["current_mood"] = mood
    
    # Форматируем название настроения
    mood_names = {
        "энергия": "⚡️ Энергия",
        "покой": "🕊️ Покой",
        "творчество": "🎨 Творчество",
        "ностальгия": "📻 Ностальгия",
        "страсть": "🔥 Страсть",
        "фокус": "🎯 Фокус",
        "гармония": "🌈 Гармония",
        "мечта": "✨ Мечта",
        "бодрость": "🚀 Бодрость",
        "уют": "🏠 Уют"
    }
    
    mood_name = mood_names.get(mood, mood.capitalize())
    
    await query.edit_message_text(
        f"Вы выбрали: {mood_name}\n"
        "Теперь подберите аромат:",
        reply_markup=aroma_keyboard(mood)
    )
    return AROMA

async def aroma_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработка выбора аромата"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        # Возврат к выбору настроения
        await query.edit_message_text(
            "Выберите настроение:",
            reply_markup=mood_keyboard()
        )
        return MOOD
    
    aroma = query.data
    mood = context.user_data.get("current_mood", "")
    is_pet_safe = context.user_data.get("pet_safe", False)
    
    # Получаем рецепт
    recipes_dict = RECIPES_PET_SAFE if is_pet_safe else RECIPES_NORMAL
    recipe = recipes_dict.get(mood, {}).get(aroma, "Рецепт не найден")
    
    # Форматируем название аромата
    pretty_aroma = {
        "утро": "🌅 Утро",
        "спорт": "🏃 Спорт",
        "офис": "💼 Офис",
        "дедлайн": "⏰ Дедлайн",
        "танцы": "💃 Танцы",
        "вечер": "🌇 Вечер",
        "медитация": "🧘 Медитация",
        "ванна": "🛁 Ванна",
        "сон": "😴 Сон",
        "чай": "🍵 Чай",
        "художник": "🎨 Художник",
        "писатель": "📝 Писатель",
        "музыка": "🎵 Музыка",
        "дизайн": "✏️ Дизайн",
        "идеи": "💡 Идеи",
        "детство": "🧸 Детство",
        "бабушкин_дом": "🏡 Бабушкин дом",
        "первая_любовь": "💘 Первая любовь",
        "школа": "🎒 Школа",
        "каникулы": "🏖️ Каникулы",
        "романтика": "🌹 Романтика",
        "танго": "💃 Танго",
        "тайна": "🔮 Тайна",
        "глубина": "🕳️ Глубина",
        "огонь": "🔥 Огонь",
        "учеба": "📚 Учеба",
        "работа": "💻 Работа",
        "шахматы": "♟️ Шахматы",
        "код": "💻 Код",
        "финансы": "💰 Финансы",
        "йога": "🧘 Йога",
        "баланс": "⚖️ Баланс",
        "природа": "🌳 Природа",
        "дыхание": "🌬️ Дыхание",
        "поток": "🌊 Поток",
        "полет": "✈️ Полет",
        "океан": "🌊 Океан",
        "звезды": "🌌 Звезды",
        "чудо": "🦄 Чудо",
        "волшебство": "🧙 Волшебство",
        "пробуждение": "⏰ Пробуждение",
        "заряд": "🔋 Заряд",
        "драйв": "🏎️ Драйв",
        "марафон": "🏁 Марафон",
        "старт": "🚀 Старт",
        "камин": "🔥 Камин",
        "плед": "🧶 Плед",
        "книга": "📚 Книга",
        "кофе": "☕ Кофе",
        "дождь": "🌧️ Дождь"
    }.get(aroma, aroma.capitalize())
    
    # Добавляем инструкцию
    full_message = (
        f"🌡️ *Ваш рецепт для {pretty_aroma}:*\n"
        f"{recipe}\n\n"
        "🛠️ *Как использовать:*\n"
        "1. Смешайте масла в пустом флаконе\n"
        "2. Добавьте 3-5 капель смеси в диффузер\n"
        "3. Наслаждайтесь ароматом 30-60 минут\n\n"
        f"{'🐾 Безопасно для питомцев' if is_pet_safe else '⚠️ Не использовать рядом с животными'}"
    )
    
    # Сохраняем текущий аромат для возможного возврата
    context.user_data["current_aroma"] = aroma
    
    await query.edit_message_text(
        full_message,
        reply_markup=final_keyboard(),
        parse_mode="Markdown"
    )
    return FINAL

async def random_aroma(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Генерация случайного аромата из всех возможных"""
    query = update.callback_query
    if query:
        await query.answer()
    
    is_pet_safe = context.user_data.get("pet_safe", False)
    recipes_dict = RECIPES_PET_SAFE if is_pet_safe else RECIPES_NORMAL
    
    # Выбираем случайное настроение
    mood = random.choice(ALL_MOODS)
    # Выбираем случайный аромат из этого настроения
    aromas = list(recipes_dict[mood].keys())
    if not aromas:
        return await handle_error(update, context)
    aroma = random.choice(aromas)
    recipe = recipes_dict[mood][aroma]
    
    # Форматируем названия
    mood_names = {
        "энергия": "⚡️ Энергия",
        "покой": "🕊️ Покой",
        "творчество": "🎨 Творчество",
        "ностальгия": "📻 Ностальгия",
        "страсть": "🔥 Страсть",
        "фокус": "🎯 Фокус",
        "гармония": "🌈 Гармония",
        "мечта": "✨ Мечта",
        "бодрость": "🚀 Бодрость",
        "уют": "🏠 Уют"
    }
    pretty_aroma = {
        "утро": "🌅 Утро",
        "спорт": "🏃 Спорт",
        "офис": "💼 Офис",
        "дедлайн": "⏰ Дедлайн",
        "танцы": "💃 Танцы",
        "вечер": "🌇 Вечер",
        "медитация": "🧘 Медитация",
        "ванна": "🛁 Ванна",
        "сон": "😴 Сон",
        "чай": "🍵 Чай",
        "художник": "🎨 Художник",
        "писатель": "📝 Писатель",
        "музыка": "🎵 Музыка",
        "дизайн": "✏️ Дизайн",
        "идеи": "💡 Идеи",
        "детство": "🧸 Детство",
        "бабушкин_дом": "🏡 Бабушкин дом",
        "первая_любовь": "💘 Первая любовь",
        "школа": "🎒 Школа",
        "каникулы": "🏖️ Каникулы",
        "романтика": "🌹 Романтика",
        "танго": "💃 Танго",
        "тайна": "🔮 Тайна",
        "глубина": "🕳️ Глубина",
        "огонь": "🔥 Огонь",
        "учеба": "📚 Учеба",
        "работа": "💻 Работа",
        "шахматы": "♟️ Шахматы",
        "код": "💻 Код",
        "финансы": "💰 Финансы",
        "йога": "🧘 Йога",
        "баланс": "⚖️ Баланс",
        "природа": "🌳 Природа",
        "дыхание": "🌬️ Дыхание",
        "поток": "🌊 Поток",
        "полет": "✈️ Полет",
        "океан": "🌊 Океан",
        "звезды": "🌌 Звезды",
        "чудо": "🦄 Чудо",
        "волшебство": "🧙 Волшебство",
        "пробуждение": "⏰ Пробуждение",
        "заряд": "🔋 Заряд",
        "драйв": "🏎️ Драйв",
        "марафон": "🏁 Марафон",
        "старт": "🚀 Старт",
        "камин": "🔥 Камин",
        "плед": "🧶 Плед",
        "книга": "📚 Книга",
        "кофе": "☕ Кофе",
        "дождь": "🌧️ Дождь"
    }.get(aroma, aroma.capitalize())
    
    mood_name = mood_names.get(mood, mood.capitalize())
    
    # Формируем сообщение
    full_message = (
        f"🎲 *Случайный аромат для {mood_name}:*\n"
        f"🌡️ *Рецепт ({pretty_aroma}):*\n"
        f"{recipe}\n\n"
        "🛠️ *Как использовать:*\n"
        "1. Смешайте масла в пустом флаконе\n"
        "2. Добавьте 3-5 капель смеси в диффузер\n"
        "3. Наслаждайтесь ароматом 30-60 минут\n\n"
        f"{'🐾 Безопасно для питомцев' if is_pet_safe else '⚠️ Не использовать рядом с животными'}"
    )
    
    # Сохраняем текущий выбор
    context.user_data["current_mood"] = mood
    context.user_data["current_aroma"] = aroma
    
    if query:
        await query.edit_message_text(
            full_message,
            reply_markup=final_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=full_message,
            reply_markup=final_keyboard(),
            parse_mode="Markdown"
        )
    
    return FINAL

async def final_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработка выбора на экране с рецептом"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "random":
        return await random_aroma(update, context)
    elif query.data == "new_aroma":
        # Возврат к выбору аромата
        mood = context.user_data.get("current_mood", "")
        if mood:
            await query.edit_message_text(
                f"Выберите аромат для настроения {mood}:",
                reply_markup=aroma_keyboard(mood)
            )
            return AROMA
        else:
            # Если настроение не сохранено, переходим к выбору настроения
            await query.edit_message_text(
                "Выберите настроение:",
                reply_markup=mood_keyboard()
            )
            return MOOD
    elif query.data == "new_mood":
        # Возврат к выбору настроения
        await query.edit_message_text(
            "Выберите настроение:",
            reply_markup=mood_keyboard()
        )
        return MOOD

async def handle_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработка ошибок"""
    logger.error("Произошла ошибка: %s", context.error)
    await update.callback_query.answer("Произошла ошибка. Попробуйте еще раз.")
    return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Отмена диалога"""
    await update.message.reply_text(
        "Диалог прерван. Начните заново командой /start"
    )
    return ConversationHandler.END

# ========== ЗАПУСК БОТА ==========
def main():
    """Запуск бота"""
    # Замените YOUR_TOKEN на реальный токен бота
    application = Application.builder().token("").build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PET: [CallbackQueryHandler(pet_choice)],
            MOOD: [CallbackQueryHandler(mood_choice)],
            AROMA: [CallbackQueryHandler(aroma_choice)],
            FINAL: [CallbackQueryHandler(final_choice)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # Обработчик ошибок
    application.add_error_handler(handle_error)
    
    # Запускаем бота
    application.run_polling()

if __name__ == "__main__":
    main()
